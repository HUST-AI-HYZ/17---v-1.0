<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\mm32f327x_g9p.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\mm32f327x_g9p.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6090000: Last Updated: Sun Aug 21 06:31:56 2022
<BR><P>
<H3>Maximum Stack Usage =       8360 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIM5_IRQHandler &rArr; collection_by_hand &rArr; FlashWhitePoints &rArr; flash_write_page &rArr; flash_erase_page
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[35]">ADC3_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[1e]">CAN1_RX_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[43]">COMP1_2_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from isr.o(.text.DMA1_Channel1_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from isr.o(.text.DMA1_Channel2_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from isr.o(.text.DMA1_Channel3_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from isr.o(.text.DMA1_Channel4_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from isr.o(.text.DMA1_Channel5_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from isr.o(.text.DMA1_Channel6_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from isr.o(.text.DMA1_Channel7_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel1_IRQHandler</a> from isr.o(.text.DMA2_Channel1_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel2_IRQHandler</a> from isr.o(.text.DMA2_Channel2_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel3_IRQHandler</a> from isr.o(.text.DMA2_Channel3_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[40]">DMA2_Channel4_IRQHandler</a> from isr.o(.text.DMA2_Channel4_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[41]">DMA2_Channel5_IRQHandler</a> from isr.o(.text.DMA2_Channel5_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[42]">ETH_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from isr.o(.text.EXTI0_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[2e]">EXTI15_10_IRQHandler</a> from isr.o(.text.EXTI15_10_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from isr.o(.text.EXTI1_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from isr.o(.text.EXTI2_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from isr.o(.text.EXTI3_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from isr.o(.text.EXTI4_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[1f]">EXTI9_5_IRQHandler</a> from isr.o(.text.EXTI9_5_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[1d]">FlashCache_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[27]">I2C1_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[28]">I2C2_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[44]">OTG_FS_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[30]">OTG_FS_WKUP_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[f]">RCC_CRS_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[2f]">RTCAlarm_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[36]">SDIO_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[29]">SPI1_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[2a]">SPI2_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[38]">SPI3_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_mm32f3277g.o(.text.SystemInit) referenced from startup_mm32f3277g.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[20]">TIM1_BRK_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[23]">TIM1_CC_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[22]">TIM1_TRG_COM_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[21]">TIM1_UP_IRQHandler</a> from isr.o(.text.TIM1_UP_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[24]">TIM2_IRQHandler</a> from isr.o(.text.TIM2_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[25]">TIM3_IRQHandler</a> from isr.o(.text.TIM3_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[26]">TIM4_IRQHandler</a> from isr.o(.text.TIM4_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[37]">TIM5_IRQHandler</a> from isr.o(.text.TIM5_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[3b]">TIM6_IRQHandler</a> from isr.o(.text.TIM6_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[3c]">TIM7_IRQHandler</a> from isr.o(.text.TIM7_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[31]">TIM8_BRK_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[34]">TIM8_CC_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[33]">TIM8_TRG_COM_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[32]">TIM8_UP_IRQHandler</a> from isr.o(.text.TIM8_UP_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[2b]">UART1_IRQHandler</a> from isr.o(.text.UART1_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[2c]">UART2_IRQHandler</a> from isr.o(.text.UART2_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[2d]">UART3_IRQHandler</a> from isr.o(.text.UART3_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[39]">UART4_IRQHandler</a> from isr.o(.text.UART4_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[3a]">UART5_IRQHandler</a> from isr.o(.text.UART5_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[45]">UART6_IRQHandler</a> from isr.o(.text.UART6_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[46]">UART7_IRQHandler</a> from isr.o(.text.UART7_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[47]">UART8_IRQHandler</a> from isr.o(.text.UART8_IRQHandler) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_mm32f3277g.o(.text) referenced from startup_mm32f3277g.o(RESET)
 <LI><a href="#[4a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mm32f3277g.o(.text)
 <LI><a href="#[4e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4b]">debug_uart_str_output</a> from zf_common_debug.o(.text.debug_uart_str_output) referenced 2 times from zf_common_debug.o(.text.debug_init)
 <LI><a href="#[48]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4d]">tft180_clear</a> from zf_device_tft180.o(.text.tft180_clear) referenced 2 times from zf_device_tft180.o(.text.tft180_debug_init)
 <LI><a href="#[4c]">tft180_show_string</a> from zf_device_tft180.o(.text.tft180_show_string) referenced 2 times from zf_device_tft180.o(.text.tft180_debug_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[4f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[122]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[123]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[124]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[125]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[126]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>COMP1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FlashCache_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f3277g.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGpsBuffer
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generating_route
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_direct_road
</UL>

<P><STRONG><a name="[53]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8f]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGpsBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_InitData
</UL>

<P><STRONG><a name="[ca]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
</UL>

<P><STRONG><a name="[9e]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadPoints
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_servo_control
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_servo_control
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_lcd_showfloat
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var2Data
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_servo_control
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_lcd_showfloat
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_lcd_showfloat
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data_Z_plus_X
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsAngleError
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBearingAngle
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_direct_road
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zhufei_nmmsl
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delta_heading_angle
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarOP
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating_recover
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_servo_control
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsAngleError
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBearingAngle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_in
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_direct_road
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delta_heading_angle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setspeed_to_pwm
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBearingAngle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_direct_road
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zhufei_nmmsl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radians
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarOP
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var2Data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setspeed_to_pwm
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating_recover
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data_Z_plus_X
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_InitData
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_in
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_direct_road
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_fcmple</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_servo_control
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_fcmplt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmplt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_fcmpge</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpge.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_servo_control
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_lcd_showfloat
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_dcmple</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDotSelection
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsAngleError
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delta_heading_angle
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_dcmplt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_auto_plannation
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDotSelection
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_direct_road
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_dcmpge</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_auto_plannation
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDotSelection
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsAngleError
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delta_heading_angle
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, dcmpeq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_auto_plannation
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collection_by_hand
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadPoints
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_servo_control
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_spin_vofa
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_servo_control
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var2Data
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating_recover
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_InitData
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_in
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_direct_road
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zhufei_nmmsl
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarOP
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var2Data
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_lcd_showfloat
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_servo_control
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_motor_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setspeed_to_pwm
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collection_by_hand
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_in
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_direct_road
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadPoints
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setspeed_to_pwm
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating_recover
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_servo_control
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDotSelection
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsAngleError
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_direct_road
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarOP
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var2Data
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating_recover
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_servo_control
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collection_by_hand
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_spin_vofa
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_in
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round_in_out
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarOP
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[12d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[12e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[12f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[55]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[5e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[5d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
</UL>

<P><STRONG><a name="[111]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[131]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[6d]"></a>_drem</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, drem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[50]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[132]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>Button_Control</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, button.o(.text.Button_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = Button_Control &rArr; move &rArr; tft180_draw_point &rArr; tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
</UL>

<P><STRONG><a name="[72]"></a>Button_get</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, button.o(.text.Button_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Button_get &rArr; gpio_get_level
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
</UL>

<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, isr.o(.text.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, isr.o(.text.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, isr.o(.text.DMA1_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, isr.o(.text.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; camera_dma_handler &rArr; dma_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, isr.o(.text.DMA1_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, isr.o(.text.DMA1_Channel6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, isr.o(.text.DMA1_Channel7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, isr.o(.text.DMA2_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, isr.o(.text.DMA2_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, isr.o(.text.DMA2_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, isr.o(.text.DMA2_Channel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, isr.o(.text.DMA2_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>Data2Var</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, flash.o(.text.Data2Var))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Data2Var
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadParam
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isr.o(.text.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, isr.o(.text.EXTI15_10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isr.o(.text.EXTI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isr.o(.text.EXTI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isr.o(.text.EXTI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isr.o(.text.EXTI4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, isr.o(.text.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EXTI9_5_IRQHandler &rArr; camera_vsync_handler &rArr; dma_set_count
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_vsync_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FlashReadMicro</STRONG> (Thumb, 146 bytes, Stack size 288 bytes, flash.o(.text.FlashReadMicro))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FlashReadMicro &rArr; flash_read_page
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_page
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadParams
</UL>

<P><STRONG><a name="[79]"></a>FlashReadParam</STRONG> (Thumb, 108 bytes, Stack size 152 bytes, flash.o(.text.FlashReadParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = FlashReadParam &rArr; flash_read_page
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data2Var
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_page
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadParams
</UL>

<P><STRONG><a name="[7b]"></a>FlashReadParams</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash.o(.text.FlashReadParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 7832<LI>Call Chain = FlashReadParams &rArr; FlashReadPoints &rArr; flash_read_page
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadPoints
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadParam
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadMicro
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>FlashReadPoints</STRONG> (Thumb, 1230 bytes, Stack size 7776 bytes, flash.o(.text.FlashReadPoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 7824<LI>Call Chain = FlashReadPoints &rArr; flash_read_page
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_page
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadParams
</UL>

<P><STRONG><a name="[7e]"></a>FlashWhitePoints</STRONG> (Thumb, 1628 bytes, Stack size 7920 bytes, flash.o(.text.FlashWhitePoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 8008<LI>Call Chain = FlashWhitePoints &rArr; flash_write_page &rArr; flash_erase_page
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteParams
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collection_by_hand
</UL>

<P><STRONG><a name="[80]"></a>FlashWriteMicro</STRONG> (Thumb, 158 bytes, Stack size 296 bytes, flash.o(.text.FlashWriteMicro))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = FlashWriteMicro &rArr; flash_write_page &rArr; flash_erase_page
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteParams
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_delete
</UL>

<P><STRONG><a name="[81]"></a>FlashWriteParam</STRONG> (Thumb, 98 bytes, Stack size 152 bytes, flash.o(.text.FlashWriteParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = FlashWriteParam &rArr; Var2Data &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var2Data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteParams
</UL>

<P><STRONG><a name="[83]"></a>FlashWriteParams</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, flash.o(.text.FlashWriteParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 8016<LI>Call Chain = FlashWriteParams &rArr; FlashWhitePoints &rArr; flash_write_page &rArr; flash_erase_page
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteParam
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteMicro
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWhitePoints
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
</UL>

<P><STRONG><a name="[84]"></a>Flash_Control</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, button.o(.text.Flash_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_Control &rArr; gpio_get_level
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
</UL>

<P><STRONG><a name="[af]"></a>Float_to_Byte</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, vofa.o(.text.Float_to_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Float_to_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vofa_7data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vofa_4data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vofa_2data
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vofa_1data
</UL>

<P><STRONG><a name="[85]"></a>GPSBearingAngle</STRONG> (Thumb, 414 bytes, Stack size 240 bytes, gps.o(.text.GPSBearingAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = GPSBearingAngle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_auto_plannation
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_spin_vofa
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generating_route
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
</UL>

<P><STRONG><a name="[8a]"></a>GPSDistance</STRONG> (Thumb, 464 bytes, Stack size 232 bytes, gps.o(.text.GPSDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = GPSDistance &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radians
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_auto_plannation
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_spin_vofa
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generating_route
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_direct_road
</UL>

<P><STRONG><a name="[8e]"></a>Get_InitData</STRONG> (Thumb, 516 bytes, Stack size 72 bytes, gps.o(.text.Get_InitData))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Get_InitData &rArr; zhufei_nmmsl &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zhufei_nmmsl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>GpsAngleError</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, gps.o(.text.GpsAngleError))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GpsAngleError &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>GpsDotSelection</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, gps.o(.text.GpsDotSelection))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GpsDotSelection &rArr; delta_heading_angle &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delta_heading_angle
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_mm32f3277g.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SystemInit &rArr; clock_init &rArr; clock_set_freq &rArr; get_greatest_common_divisor
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, isr.o(.text.TIM1_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isr.o(.text.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, isr.o(.text.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM4_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, isr.o(.text.TIM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM5_IRQHandler</STRONG> (Thumb, 3928 bytes, Stack size 288 bytes, isr.o(.text.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8360<LI>Call Chain = TIM5_IRQHandler &rArr; collection_by_hand &rArr; FlashWhitePoints &rArr; flash_write_page &rArr; flash_erase_page
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setspeed_to_pwm
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGpsBuffer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating_recover
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_delete
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_get_gyro
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_servo_control
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_auto_plannation
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collection_by_hand
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data_Z_plus_X
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDotSelection
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsAngleError
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_InitData
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBearingAngle
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM6_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, isr.o(.text.TIM6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, isr.o(.text.TIM7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr.o(.text.TIM8_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM8_UP_IRQHandler &rArr; tsl1401_collect_pit_handler &rArr; adc_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl1401_collect_pit_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>Trans_Data_Z_plus_X</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, gps.o(.text.Trans_Data_Z_plus_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Trans_Data_Z_plus_X &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[2b]"></a>UART1_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, isr.o(.text.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART2_IRQHandler</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, isr.o(.text.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART2_IRQHandler &rArr; uart_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_byte
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART3_IRQHandler</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, isr.o(.text.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART3_IRQHandler &rArr; uart_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_byte
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART4_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, isr.o(.text.UART4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART5_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, isr.o(.text.UART5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART6_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, isr.o(.text.UART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART6_IRQHandler &rArr; wireless_module_uart_handler &rArr; bluetooth_ch9141_uart_callback &rArr; fifo_write_buffer &rArr; fifo_head_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_module_uart_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART7_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, isr.o(.text.UART7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART8_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, isr.o(.text.UART8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART8_IRQHandler &rArr; camera_uart_handler &rArr; uart_query_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_uart_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f3277g.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>Var2Data</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, flash.o(.text.Var2Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Var2Data &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteParam
</UL>

<P><STRONG><a name="[ad]"></a>VarOP</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, show_page.o(.text.VarOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VarOP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
</UL>

<P><STRONG><a name="[ae]"></a>Vofa_1data</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, vofa.o(.text.Vofa_1data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Vofa_1data &rArr; Float_to_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float_to_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_spin_vofa
</UL>

<P><STRONG><a name="[b1]"></a>Vofa_2data</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, vofa.o(.text.Vofa_2data))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Vofa_2data &rArr; Float_to_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float_to_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_spin_vofa
</UL>

<P><STRONG><a name="[b2]"></a>Vofa_4data</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, vofa.o(.text.Vofa_4data))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Vofa_4data &rArr; Float_to_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float_to_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_spin_vofa
</UL>

<P><STRONG><a name="[b3]"></a>Vofa_7data</STRONG> (Thumb, 464 bytes, Stack size 80 bytes, vofa.o(.text.Vofa_7data))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Vofa_7data &rArr; Float_to_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float_to_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_spin_vofa
</UL>

<P><STRONG><a name="[10c]"></a>adc_convert</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, zf_driver_adc.o(.text.adc_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl1401_collect_pit_handler
</UL>

<P><STRONG><a name="[104]"></a>afio_init</STRONG> (Thumb, 386 bytes, Stack size 44 bytes, zf_driver_gpio.o(.text.afio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = afio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[b4]"></a>bluetooth_ch9141_uart_callback</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, zf_device_bluetooth_ch9141.o(.text.bluetooth_ch9141_uart_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bluetooth_ch9141_uart_callback &rArr; fifo_write_buffer &rArr; fifo_head_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_module_uart_handler
</UL>

<P><STRONG><a name="[b7]"></a>button_init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, button.o(.text.button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = button_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>camera_dma_handler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, zf_device_type.o(.text.camera_dma_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = camera_dma_handler &rArr; dma_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>camera_uart_handler</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, zf_device_type.o(.text.camera_uart_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = camera_uart_handler &rArr; uart_query_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>camera_vsync_handler</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, zf_device_type.o(.text.camera_vsync_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = camera_vsync_handler &rArr; dma_set_count
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_count
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>change_motor</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, motor.o(.text.change_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = change_motor &rArr; pwm_set_duty &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setspeed_to_pwm
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[97]"></a>clock_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, zf_common_clock.o(.text.clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clock_init &rArr; clock_set_freq &rArr; get_greatest_common_divisor
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_set_freq
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a7]"></a>collection_by_hand</STRONG> (Thumb, 830 bytes, Stack size 64 bytes, route_generating.o(.text.collection_by_hand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8072<LI>Call Chain = collection_by_hand &rArr; FlashWhitePoints &rArr; flash_write_page &rArr; flash_erase_page
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWhitePoints
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_show_string
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>debug_assert_handler</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, zf_common_debug.o(.text.debug_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_global_disable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_draw_point
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_show_string
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_show_char
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_set_region
</UL>

<P><STRONG><a name="[c6]"></a>debug_init</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, zf_common_debug.o(.text.debug_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = debug_init &rArr; uart_init &rArr; afio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output_struct_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output_init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>debug_output_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, zf_common_debug.o(.text.debug_output_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_output_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_debug_init
</UL>

<P><STRONG><a name="[c7]"></a>debug_output_struct_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, zf_common_debug.o(.text.debug_output_struct_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_output_struct_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_debug_init
</UL>

<P><STRONG><a name="[74]"></a>delay</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, button.o(.text.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_get
</UL>

<P><STRONG><a name="[95]"></a>delta_heading_angle</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, gps.o(.text.delta_heading_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = delta_heading_angle &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_auto_plannation
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsDotSelection
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
</UL>

<P><STRONG><a name="[b9]"></a>dma_disable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, zf_driver_dma.o(.text.dma_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_vsync_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_dma_handler
</UL>

<P><STRONG><a name="[bb]"></a>dma_enable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, zf_driver_dma.o(.text.dma_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_vsync_handler
</UL>

<P><STRONG><a name="[ba]"></a>dma_set_count</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, zf_driver_dma.o(.text.dma_set_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dma_set_count
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_vsync_handler
</UL>

<P><STRONG><a name="[cd]"></a>end_vofa</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, vofa.o(.text.end_vofa))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = end_vofa &rArr; uart_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_spin_vofa
</UL>

<P><STRONG><a name="[cf]"></a>fifo_head_offset</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, zf_common_fifo.o(.text.fifo_head_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fifo_head_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
</UL>

<P><STRONG><a name="[b6]"></a>fifo_write_buffer</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, zf_common_fifo.o(.text.fifo_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fifo_write_buffer &rArr; fifo_head_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_global_enable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_head_offset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_global_disable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_ch9141_uart_callback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_uart_callback
</UL>

<P><STRONG><a name="[d1]"></a>flash_check</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, zf_driver_flash.o(.text.flash_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_check
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
</UL>

<P><STRONG><a name="[d2]"></a>flash_erase_page</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, zf_driver_flash.o(.text.flash_erase_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_erase_page
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
</UL>

<P><STRONG><a name="[78]"></a>flash_read_page</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, zf_driver_flash.o(.text.flash_read_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = flash_read_page
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadPoints
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadParam
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadMicro
</UL>

<P><STRONG><a name="[7f]"></a>flash_write_page</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, zf_driver_flash.o(.text.flash_write_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_write_page &rArr; flash_erase_page
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteParam
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteMicro
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWhitePoints
</UL>

<P><STRONG><a name="[d3]"></a>generate_direct_road</STRONG> (Thumb, 966 bytes, Stack size 1072 bytes, route_generating.o(.text.generate_direct_road))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = generate_direct_road &rArr; GPSDistance &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generating_route
</UL>

<P><STRONG><a name="[d5]"></a>generate_round_road</STRONG> (Thumb, 3562 bytes, Stack size 3384 bytes, route_generating.o(.text.generate_round_road))
<BR><BR>[Stack]<UL><LI>Max Depth = 3872<LI>Call Chain = generate_round_road &rArr; GPSBearingAngle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBearingAngle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delta_heading_angle
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generating_route
</UL>

<P><STRONG><a name="[d6]"></a>generating_route</STRONG> (Thumb, 830 bytes, Stack size 3392 bytes, route_generating.o(.text.generating_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 7264<LI>Call Chain = generating_route &rArr; generate_round_road &rArr; GPSBearingAngle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBearingAngle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_in
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round_in_out
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_round_road
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_direct_road
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>generating_route_init</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, route_generating.o(.text.generating_route_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = generating_route_init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>get_greatest_common_divisor</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, zf_common_function.o(.text.get_greatest_common_divisor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_greatest_common_divisor
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_set_freq
</UL>

<P><STRONG><a name="[73]"></a>gpio_get_level</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, zf_driver_gpio.o(.text.gpio_get_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Control
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_get
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collection_by_hand
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>gpio_init</STRONG> (Thumb, 454 bytes, Stack size 44 bytes, zf_driver_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
</UL>

<P><STRONG><a name="[a5]"></a>gps_auto_plannation</STRONG> (Thumb, 1852 bytes, Stack size 240 bytes, route_generating.o(.text.gps_auto_plannation))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = gps_auto_plannation &rArr; tft180_show_string &rArr; tft180_show_char &rArr; tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBearingAngle
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_show_string
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delta_heading_angle
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>gps_init</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, zf_device_gps_tau1201.o(.text.gps_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = gps_init &rArr; uart_init &rArr; afio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_buffer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_interrupt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>gps_servo_control</STRONG> (Thumb, 1200 bytes, Stack size 128 bytes, motor.o(.text.gps_servo_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = gps_servo_control &rArr; pwm_set_duty &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>icm20602_get_gyro</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, zf_device_icm20602.o(.text.icm20602_get_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = icm20602_get_gyro &rArr; icm20602_read_registers &rArr; spi_read_8bit_registers
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read_registers
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>icm20602_init</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, zf_device_icm20602.o(.text.icm20602_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = icm20602_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_write_register
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_self_check
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>interrupt_disable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, zf_common_interrupt.o(.text.interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interrupt_disable &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_interrupt
</UL>

<P><STRONG><a name="[e9]"></a>interrupt_enable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, zf_common_interrupt.o(.text.interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interrupt_enable &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_interrupt
</UL>

<P><STRONG><a name="[c3]"></a>interrupt_global_disable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, zf_common_interrupt.o(.text.interrupt_global_disable))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>

<P><STRONG><a name="[d0]"></a>interrupt_global_enable</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, zf_common_interrupt.o(.text.interrupt_global_enable))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
</UL>

<P><STRONG><a name="[bf]"></a>interrupt_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, zf_common_interrupt.o(.text.interrupt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interrupt_init &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[ec]"></a>interrupt_set_priority</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, zf_common_interrupt.o(.text.interrupt_set_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = interrupt_set_priority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>main</STRONG> (Thumb, 470 bytes, Stack size 64 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 8176<LI>Call Chain = main &rArr; page_spin &rArr; FlashWriteParams &rArr; FlashWhitePoints &rArr; flash_write_page &rArr; flash_erase_page
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_full
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_draw_point
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_motor_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_spin_vofa
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_set_priority
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generating_route_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generating_route
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a8]"></a>micro_delete</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, route_generating.o(.text.micro_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = micro_delete &rArr; FlashWriteMicro &rArr; flash_write_page &rArr; flash_erase_page
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteMicro
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>micro_operating</STRONG> (Thumb, 1188 bytes, Stack size 176 bytes, route_generating.o(.text.micro_operating))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = micro_operating &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>micro_operating_recover</STRONG> (Thumb, 1164 bytes, Stack size 176 bytes, route_generating.o(.text.micro_operating_recover))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = micro_operating_recover &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>motor_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, motor.o(.text.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = motor_init &rArr; change_motor &rArr; pwm_set_duty &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_motor
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>move</STRONG> (Thumb, 874 bytes, Stack size 16 bytes, button.o(.text.move))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = move &rArr; tft180_draw_point &rArr; tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_full
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Control
</UL>

<P><STRONG><a name="[fc]"></a>my_lcd_showfloat</STRONG> (Thumb, 594 bytes, Stack size 120 bytes, show_page.o(.text.my_lcd_showfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = my_lcd_showfloat &rArr; tft180_show_char &rArr; tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_show_char
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_text_param
</UL>

<P><STRONG><a name="[fe]"></a>my_lcd_showint16</STRONG> (Thumb, 434 bytes, Stack size 104 bytes, show_page.o(.text.my_lcd_showint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = my_lcd_showint16 &rArr; tft180_show_char &rArr; tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_show_char
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_text_param
</UL>

<P><STRONG><a name="[ff]"></a>my_lcd_showint32</STRONG> (Thumb, 552 bytes, Stack size 144 bytes, show_page.o(.text.my_lcd_showint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = my_lcd_showint32 &rArr; tft180_show_char &rArr; tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_show_char
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_text_param
</UL>

<P><STRONG><a name="[100]"></a>page_show_params</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, show_page.o(.text.page_show_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = page_show_params &rArr; page_text_param &rArr; my_lcd_showint32 &rArr; tft180_show_char &rArr; tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_full
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_show_string
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_text_param
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
</UL>

<P><STRONG><a name="[f6]"></a>page_spin</STRONG> (Thumb, 2182 bytes, Stack size 96 bytes, show_page.o(.text.page_spin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8112<LI>Call Chain = page_spin &rArr; FlashWriteParams &rArr; FlashWhitePoints &rArr; flash_write_page &rArr; flash_erase_page
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteParams
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadPoints
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Control
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_get
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Control
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_draw_point
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_show_string
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_motor
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_show_params
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarOP
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>page_text_param</STRONG> (Thumb, 288 bytes, Stack size 64 bytes, show_page.o(.text.page_text_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = page_text_param &rArr; my_lcd_showint32 &rArr; tft180_show_char &rArr; tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_show_string
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_lcd_showint32
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_lcd_showint16
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_lcd_showfloat
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_show_params
</UL>

<P><STRONG><a name="[a1]"></a>parseGpsBuffer</STRONG> (Thumb, 670 bytes, Stack size 96 bytes, gps.o(.text.parseGpsBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = parseGpsBuffer &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>pit_init</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, zf_driver_pit.o(.text.pit_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = pit_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_funciton_check
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>pwm_init</STRONG> (Thumb, 622 bytes, Stack size 72 bytes, zf_driver_pwm.o(.text.pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = pwm_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_funciton_check
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clock_enable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_motor_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[a3]"></a>pwm_set_duty</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, zf_driver_pwm.o(.text.pwm_set_duty))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = pwm_set_duty &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_servo_control
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_motor_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_motor
</UL>

<P><STRONG><a name="[8b]"></a>radians</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gps.o(.text.radians))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = radians &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
</UL>

<P><STRONG><a name="[d8]"></a>round_in_out</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, route_generating.o(.text.round_in_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = round_in_out &rArr; __ARM_isnan
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generating_route
</UL>

<P><STRONG><a name="[ef]"></a>seekfree_wireless_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, zf_device_wireless_uart.o(.text.seekfree_wireless_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = seekfree_wireless_init &rArr; uart_init &rArr; afio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_interrupt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>send_spin_vofa</STRONG> (Thumb, 930 bytes, Stack size 176 bytes, vofa.o(.text.send_spin_vofa))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = send_spin_vofa &rArr; GPSBearingAngle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBearingAngle
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_vofa
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vofa_7data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vofa_4data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vofa_2data
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vofa_1data
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>servo_motor_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, motor.o(.text.servo_motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = servo_motor_init &rArr; pwm_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>setspeed_to_pwm</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, motor.o(.text.setspeed_to_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = setspeed_to_pwm &rArr; change_motor &rArr; pwm_set_duty &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_motor
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>spi_init</STRONG> (Thumb, 704 bytes, Stack size 80 bytes, zf_driver_spi.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = spi_init &rArr; afio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init
</UL>

<P><STRONG><a name="[e4]"></a>spi_read_8bit_register</STRONG> (Thumb, 224 bytes, Stack size 12 bytes, zf_driver_spi.o(.text.spi_read_8bit_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_read_8bit_register
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read_register
</UL>

<P><STRONG><a name="[e5]"></a>spi_read_8bit_registers</STRONG> (Thumb, 264 bytes, Stack size 44 bytes, zf_driver_spi.o(.text.spi_read_8bit_registers))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = spi_read_8bit_registers
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read_registers
</UL>

<P><STRONG><a name="[106]"></a>spi_write_16bit</STRONG> (Thumb, 202 bytes, Stack size 12 bytes, zf_driver_spi.o(.text.spi_write_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_write_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_full
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_draw_point
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_show_char
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_clear
</UL>

<P><STRONG><a name="[10b]"></a>spi_write_8bit</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, zf_driver_spi.o(.text.spi_write_8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_write_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_write_index
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_set_region
</UL>

<P><STRONG><a name="[e6]"></a>spi_write_8bit_register</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, zf_driver_spi.o(.text.spi_write_8bit_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_write_8bit_register
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_write_register
</UL>

<P><STRONG><a name="[8c]"></a>sq</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, gps.o(.text.sq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sq &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
</UL>

<P><STRONG><a name="[da]"></a>system_delay</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, zf_driver_delay.o(.text.system_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = system_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_self_check
</UL>

<P><STRONG><a name="[4d]"></a>tft180_clear</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, zf_device_tft180.o(.text.tft180_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tft180_clear &rArr; tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_16bit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zf_device_tft180.o(.text.tft180_debug_init)
</UL>
<P><STRONG><a name="[f5]"></a>tft180_draw_point</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, zf_device_tft180.o(.text.tft180_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = tft180_draw_point &rArr; tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_16bit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>tft180_full</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, zf_device_tft180.o(.text.tft180_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tft180_full &rArr; tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_16bit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_show_params
</UL>

<P><STRONG><a name="[f1]"></a>tft180_init</STRONG> (Thumb, 1072 bytes, Stack size 120 bytes, zf_device_tft180.o(.text.tft180_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = tft180_init &rArr; tft180_clear &rArr; tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_8bit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_set_dir
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_set_color
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_clear
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_write_index
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_debug_init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>tft180_set_color</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, zf_device_tft180.o(.text.tft180_set_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tft180_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_init
</UL>

<P><STRONG><a name="[108]"></a>tft180_set_dir</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, zf_device_tft180.o(.text.tft180_set_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tft180_set_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_init
</UL>

<P><STRONG><a name="[fd]"></a>tft180_show_char</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, zf_device_tft180.o(.text.tft180_show_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = tft180_show_char &rArr; tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_16bit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_show_string
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_lcd_showint32
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_lcd_showint16
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_lcd_showfloat
</UL>

<P><STRONG><a name="[4c]"></a>tft180_show_string</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, zf_device_tft180.o(.text.tft180_show_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = tft180_show_string &rArr; tft180_show_char &rArr; tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_show_char
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_auto_plannation
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collection_by_hand
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_spin
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_text_param
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_show_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zf_device_tft180.o(.text.tft180_debug_init)
</UL>
<P><STRONG><a name="[103]"></a>timer_clock_enable</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, zf_driver_timer.o(.text.timer_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[102]"></a>timer_funciton_check</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, zf_driver_timer.o(.text.timer_funciton_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_funciton_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[a9]"></a>tsl1401_collect_pit_handler</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, zf_device_tsl1401.o(.text.tsl1401_collect_pit_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tsl1401_collect_pit_handler &rArr; adc_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>uart_init</STRONG> (Thumb, 642 bytes, Stack size 56 bytes, zf_driver_uart.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init &rArr; afio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
</UL>

<P><STRONG><a name="[b5]"></a>uart_query_byte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, zf_driver_uart.o(.text.uart_query_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_query_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_uart_handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_ch9141_uart_callback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_uart_callback
</UL>

<P><STRONG><a name="[aa]"></a>uart_read_byte</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, zf_driver_uart.o(.text.uart_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>uart_rx_interrupt</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, zf_driver_uart.o(.text.uart_rx_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_rx_interrupt &rArr; interrupt_enable &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_enable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
</UL>

<P><STRONG><a name="[db]"></a>uart_write_buffer</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, zf_driver_uart.o(.text.uart_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_write_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
</UL>

<P><STRONG><a name="[b0]"></a>uart_write_byte</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, zf_driver_uart.o(.text.uart_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_vofa
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vofa_7data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vofa_4data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vofa_2data
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vofa_1data
</UL>

<P><STRONG><a name="[cc]"></a>uart_write_string</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, zf_driver_uart.o(.text.uart_write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart_write_string &rArr; uart_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_str_output
</UL>

<P><STRONG><a name="[ab]"></a>wireless_module_uart_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, zf_device_type.o(.text.wireless_module_uart_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wireless_module_uart_handler &rArr; bluetooth_ch9141_uart_callback &rArr; fifo_write_buffer &rArr; fifo_head_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_ch9141_uart_callback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_uart_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>wireless_uart_callback</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, zf_device_wireless_uart.o(.text.wireless_uart_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wireless_uart_callback &rArr; fifo_write_buffer &rArr; fifo_head_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_module_uart_handler
</UL>

<P><STRONG><a name="[d7]"></a>write_in</STRONG> (Thumb, 644 bytes, Stack size 176 bytes, route_generating.o(.text.write_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = write_in &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generating_route
</UL>

<P><STRONG><a name="[90]"></a>zhufei_nmmsl</STRONG> (Thumb, 1444 bytes, Stack size 296 bytes, gps.o(.text.zhufei_nmmsl))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = zhufei_nmmsl &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_InitData
</UL>

<P><STRONG><a name="[10e]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[135]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[136]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[137]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[cb]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
</UL>

<P><STRONG><a name="[115]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[110]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[112]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[113]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[114]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[117]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[118]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[119]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[116]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[138]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[139]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[120]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[11f]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[88]"></a>atan2</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBearingAngle
</UL>

<P><STRONG><a name="[86]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBearingAngle
</UL>

<P><STRONG><a name="[89]"></a>fmod</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fmod.o(i.fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fmod &rArr; _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBearingAngle
</UL>

<P><STRONG><a name="[87]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBearingAngle
</UL>

<P><STRONG><a name="[8d]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSDistance
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[fa]"></a>__ARM_isnan</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, route_generating.o(.text.__ARM_isnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_isnan
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating_recover
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round_in_out
</UL>

<P><STRONG><a name="[f9]"></a>__ARM_isnanf</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, route_generating.o(.text.__ARM_isnanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating_recover
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_operating
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round_in_out
</UL>

<P><STRONG><a name="[bd]"></a>clock_reset</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, zf_common_clock.o(.text.clock_reset))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[be]"></a>clock_set_freq</STRONG> (Thumb, 646 bytes, Stack size 48 bytes, zf_common_clock.o(.text.clock_set_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clock_set_freq &rArr; get_greatest_common_divisor
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_greatest_common_divisor
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[c5]"></a>debug_delay</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, zf_common_debug.o(.text.debug_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>

<P><STRONG><a name="[c4]"></a>debug_output</STRONG> (Thumb, 704 bytes, Stack size 544 bytes, zf_common_debug.o(.text.debug_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>

<P><STRONG><a name="[4b]"></a>debug_uart_str_output</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, zf_common_debug.o(.text.debug_uart_str_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = debug_uart_str_output &rArr; uart_write_string &rArr; uart_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zf_common_debug.o(.text.debug_init)
</UL>
<P><STRONG><a name="[e8]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, zf_common_interrupt.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_disable
</UL>

<P><STRONG><a name="[ea]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, zf_common_interrupt.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_enable
</UL>

<P><STRONG><a name="[ed]"></a>__NVIC_SetPriority</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, zf_common_interrupt.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_set_priority
</UL>

<P><STRONG><a name="[eb]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, zf_common_interrupt.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
</UL>

<P><STRONG><a name="[e3]"></a>icm20602_read_register</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, zf_device_icm20602.o(.text.icm20602_read_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icm20602_read_register &rArr; spi_read_8bit_register
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_8bit_register
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_self_check
</UL>

<P><STRONG><a name="[de]"></a>icm20602_read_registers</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, zf_device_icm20602.o(.text.icm20602_read_registers))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = icm20602_read_registers &rArr; spi_read_8bit_registers
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_8bit_registers
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_get_gyro
</UL>

<P><STRONG><a name="[e1]"></a>icm20602_self_check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, zf_device_icm20602.o(.text.icm20602_self_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = icm20602_self_check &rArr; icm20602_read_register &rArr; spi_read_8bit_register
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init
</UL>

<P><STRONG><a name="[e2]"></a>icm20602_write_register</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, zf_device_icm20602.o(.text.icm20602_write_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = icm20602_write_register &rArr; spi_write_8bit_register
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_8bit_register
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init
</UL>

<P><STRONG><a name="[107]"></a>tft180_debug_init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, zf_device_tft180.o(.text.tft180_debug_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tft180_debug_init &rArr; debug_output_struct_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output_struct_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_init
</UL>

<P><STRONG><a name="[105]"></a>tft180_set_region</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, zf_device_tft180.o(.text.tft180_set_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = tft180_set_region &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_8bit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_write_index
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_full
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_draw_point
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_show_char
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_clear
</UL>

<P><STRONG><a name="[10a]"></a>tft180_write_index</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, zf_device_tft180.o(.text.tft180_write_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tft180_write_index &rArr; spi_write_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft180_set_region
</UL>

<P><STRONG><a name="[11a]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10f]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[11d]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
